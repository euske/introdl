#!/usr/bin/env python
##
##  yolo_net.py - Mini YOLO model.
##
import torch
import torch.nn as nn
import torch.nn.functional as F
from yolo_utils import VOCDataset as dataset


##  YOLONet
##
class YOLONet(nn.Module):

    NVALS = (5 + len(dataset.CATEGORIES))
    INPUT_SIZE = (3, 224, 224)
    OUTPUT_SIZE = (7, 7, NVALS)

    def __init__(self):
        super().__init__()
        # x: (N × 3 × 224 × 224)
        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)
        # x: (N × 32 × 224 × 224)
        self.norm1 = nn.BatchNorm2d(32)
        self.pool1 = nn.MaxPool2d(2, stride=2)
        # x: (N × 32 × 112 × 112)
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)
        # x: (N × 64 × 112 × 112)
        self.norm2 = nn.BatchNorm2d(64)
        self.pool2 = nn.MaxPool2d(2, stride=2)
        # x: (N × 64 × 56 × 56)
        self.conv3 = nn.Conv2d(64, 128, 3, padding=1)
        # x: (N × 128 × 56 × 56)
        self.norm3 = nn.BatchNorm2d(128)
        self.conv4 = nn.Conv2d(128, 64, 1)
        # x: (N × 64 × 56 × 56)
        self.norm4 = nn.BatchNorm2d(64)
        self.conv5 = nn.Conv2d(64, 128, 3, padding=1)
        # x: (N × 128 × 56 × 56)
        self.norm5 = nn.BatchNorm2d(128)
        self.pool5 = nn.MaxPool2d(2, stride=2)
        # x: (N × 128 × 28 × 28)
        self.conv6 = nn.Conv2d(128, 256, 3, padding=1)
        # x: (N × 256 × 28 × 28)
        self.norm6 = nn.BatchNorm2d(256)
        self.conv7 = nn.Conv2d(256, 128, 1)
        # x: (N × 128 × 28 × 28)
        self.norm7 = nn.BatchNorm2d(128)
        self.conv8 = nn.Conv2d(128, 256, 3, padding=1)
        # x: (N × 256 × 28 × 28)
        self.norm8 = nn.BatchNorm2d(256)
        self.pool8 = nn.MaxPool2d(2, stride=2)
        # x: (N × 256 × 14 × 14)
        self.conv9 = nn.Conv2d(256, 512, 3, padding=1)
        # x: (N × 512 × 14 × 14)
        self.norm9 = nn.BatchNorm2d(512)
        self.conv10 = nn.Conv2d(512, 256, 1)
        # x: (N × 256 × 14 × 14)
        self.norm10 = nn.BatchNorm2d(256)
        self.conv11 = nn.Conv2d(256, 512, 3, padding=1)
        # x: (N × 512 × 14 × 14)
        self.norm11 = nn.BatchNorm2d(512)
        self.conv12 = nn.Conv2d(512, 256, 1)
        # x: (N × 256 × 14 × 14)
        self.norm12 = nn.BatchNorm2d(256)
        self.conv13 = nn.Conv2d(256, 512, 3, padding=1)
        # x: (N × 512 × 14 × 14)
        self.norm13 = nn.BatchNorm2d(512)
        self.pool13 = nn.MaxPool2d(2, stride=2)
        # x: (N × 512 × 7 × 7)
        self.conv14 = nn.Conv2d(512, 1024, 3, padding=1)
        # x: (N × 1024 × 7 × 7)
        self.norm14 = nn.BatchNorm2d(1024)
        self.conv15 = nn.Conv2d(1024, 512, 1)
        # x: (N × 512 × 7 × 7)
        self.norm15 = nn.BatchNorm2d(512)
        self.conv16 = nn.Conv2d(512, 1024, 3, padding=1)
        # x: (N × 1024 × 7 × 7)
        self.norm16 = nn.BatchNorm2d(1024)
        self.conv17 = nn.Conv2d(1024, 512, 1)
        # x: (N × 512 × 7 × 7)
        self.norm17 = nn.BatchNorm2d(512)
        self.conv18 = nn.Conv2d(512, 1024, 3, padding=1)
        # x: (N × 1024 × 7 × 7)
        self.norm18 = nn.BatchNorm2d(1024)
        self.conv19 = nn.Conv2d(1024, self.NVALS, 1)
        # x: (N × NVALS × 7 × 7)
        return

    def forward(self, x):
        assert x.shape[1:] == self.INPUT_SIZE, x.shape
        # x: (N × 3 × 224 × 224)
        x = self.conv1(x)
        # x: (N × 32 × 224 × 224)
        x = self.norm1(x)
        x = F.leaky_relu(x, 0.1)
        x = self.pool1(x)
        # x: (N × 32 × 112 × 112)
        x = self.conv2(x)
        # x: (N × 64 × 112 × 112)
        x = self.norm2(x)
        x = F.leaky_relu(x, 0.1)
        x = self.pool2(x)
        # x: (N × 64 × 56 × 56)
        x = self.conv3(x)
        # x: (N × 128 × 56 × 56)
        x = self.norm3(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv4(x)
        # x: (N × 64 × 56 × 56)
        x = self.norm4(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv5(x)
        # x: (N × 128 × 56 × 56)
        x = self.norm5(x)
        x = F.leaky_relu(x, 0.1)
        x = self.pool5(x)
        # x: (N × 128 × 28 × 28)
        x = self.conv6(x)
        # x: (N × 256 × 28 × 28)
        x = self.norm6(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv7(x)
        # x: (N × 128 × 28 × 28)
        x = self.norm7(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv8(x)
        # x: (N × 256 × 28 × 28)
        x = self.norm8(x)
        x = F.leaky_relu(x, 0.1)
        x = self.pool8(x)
        # x: (N × 256 × 14 × 14)
        x = self.conv9(x)
        # x: (N × 512 × 14 × 14)
        x = self.norm9(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv10(x)
        # x: (N × 256 × 14 × 14)
        x = self.norm10(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv11(x)
        # x: (N × 512 × 14 × 14)
        x = self.norm11(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv12(x)
        # x: (N × 256 × 14 × 14)
        x = self.norm12(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv13(x)
        # x: (N × 512 × 14 × 14)
        x = self.norm13(x)
        x = F.leaky_relu(x, 0.1)
        x = self.pool13(x)
        # x: (N × 512 × 7 × 7)
        x = self.conv14(x)
        # x: (N × 1024 × 7 × 7)
        x = self.norm14(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv15(x)
        # x: (N × 512 × 7 × 7)
        x = self.norm15(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv16(x)
        # x: (N × 1024 × 7 × 7)
        x = self.norm16(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv17(x)
        # x: (N × 512 × 7 × 7)
        x = self.norm17(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv18(x)
        # x: (N × 1024 × 7 × 7)
        x = self.norm18(x)
        x = F.leaky_relu(x, 0.1)
        x = self.conv19(x)
        # x: (N × NVALS × 7 × 7)
        x = x.permute(0,2,3,1)
        # x: (N × 7 × 7 × NVALS)
        assert x.shape[1:] == self.OUTPUT_SIZE, x.shape
        return x

if __name__ == '__main__':
    import torchsummary
    net = YOLONet().cuda()
    torchsummary.summary(net, net.INPUT_SIZE)
